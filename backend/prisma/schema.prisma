// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(uuid())
    email         String         @unique
    username      String         @unique
    password      String
    is_verified   Boolean        @default(false)
    refresh_token String?        @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    verified_at   DateTime?
    entries       Entry[]
    upvotes       Upvote[]
    downvotes     Downvote[]
    comments      Comment[]
    shares        Share[]
    refreshTokens RefreshToken[]
}

model VerificationToken {
    id      String   @id @default(uuid())
    email   String   @db.VarChar(50)
    token   String   @unique @default(uuid())
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(uuid())
    email   String   @db.VarChar(50)
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Entry {
    id           Int        @id @default(autoincrement())
    name         String
    description  String
    category     Category   @relation(fields: [categoryId], references: [id])
    categoryId   Int
    businessName String?
    date         DateTime?
    location     Location   @relation(fields: [locationId], references: [id])
    locationId   Int
    contactInfo  Int?
    images       Image[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    upvotes      Upvote[]
    downvotes    Downvote[]
    comments     Comment[]
    shares       Share[]
}

model Category {
    id      Int     @id @default(autoincrement())
    name    String  @unique
    entries Entry[]
}

model Location {
    id        Int     @id @default(autoincrement())
    name      String
    latitude  Float
    longitude Float
    entries   Entry[]
}

model Image {
    id      Int    @id @default(autoincrement())
    url     String
    entry   Entry  @relation(fields: [entryId], references: [id])
    entryId Int
}

model Upvote {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    entry     Entry    @relation(fields: [entryId], references: [id])
    entryId   Int
    createdAt DateTime @default(now())

    @@unique([userId, entryId])
}

model Downvote {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    entry     Entry    @relation(fields: [entryId], references: [id])
    entryId   Int
    createdAt DateTime @default(now())

    @@unique([userId, entryId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    entry     Entry    @relation(fields: [entryId], references: [id])
    entryId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Share {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    entry     Entry    @relation(fields: [entryId], references: [id])
    entryId   Int
    createdAt DateTime @default(now())
}

model RefreshToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    expiresAt DateTime
    createdAt DateTime @default(now())
}
